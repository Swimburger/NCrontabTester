@using NCrontab
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.WebUtilities
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<input @onkeyup="SetExpression" @bind="cronExpression" @bind:event="oninput" placeholder="Cron Expression" />
<br />
<button @onclick="PrintOccurrences">Print More Occurrences</button>
<button @onclick="CopyLink">Copy Link</button>

<ul>
    @foreach (var occurence in occurrences)
    {
        <li>
            @occurence.ToString("yyyy-MM-dd HH:mm:ss")
        </li>
    }
</ul>

@errorMessage

@code {
    private DateTime startDate = DateTime.Today;
    private string cronExpression = "0 12 * */2 Mon";
    private CrontabSchedule cronSchedule;
    private List<DateTime> occurrences = new List<DateTime>();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryPairs = QueryHelpers.ParseQuery(uri.Query);
        if (queryPairs.ContainsKey("expression"))
        {
            cronExpression = queryPairs["expression"].First();
        }

        SetExpression();
    }

    private void PrintOccurrences()
    {
        var mostRecentDate = occurrences.Count == 0 ? startDate : occurrences.Last();
        for (int i = 0; i < 10; i++)
        {
            mostRecentDate = cronSchedule.GetNextOccurrence(mostRecentDate);
            occurrences.Add(mostRecentDate);
        }
    }

    private void SetExpression()
    {
        occurrences.Clear();
        var hasSecondsInExpression = cronExpression
            .Trim()
            .Replace(@"\t", " ")
            .Split(' ', StringSplitOptions.RemoveEmptyEntries)
            .Count() == 6;

        try
        {
            cronSchedule = CrontabSchedule.Parse(cronExpression, new CrontabSchedule.ParseOptions { IncludingSeconds = hasSecondsInExpression });
            errorMessage = string.Empty;
            PrintOccurrences();
        }
        catch (CrontabException exception)
        {
            Logger.LogError(exception, exception.Message);
            errorMessage = exception.Message;
        }
    }

    private void CopyLink()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryPairs = QueryHelpers.ParseQuery(uri.Query);
        queryPairs["expression"] = new Microsoft.Extensions.Primitives.StringValues(cronExpression);
        var uriToCopy = QueryHelpers.AddQueryString(NavigationManager.Uri, "expression", cronExpression);
        JSRuntime.InvokeVoidAsync("copyText", uriToCopy);
    }
}